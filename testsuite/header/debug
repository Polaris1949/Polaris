// Debug library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     debug
 *  @brief    Debug library
 *  @author   Polaris Zhao
 *  @version  3.0
 *  @deprecated  This header has been deprecated.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_DEBUG
#define _POLLIB_DEBUG 1

#pragma GCC system_header

#include <experimental/source_location>
#include <string>
#include <iostream>

namespace polaris
{

#if POL_DEBUG
class debug_helper
{
protected:
    size_t _M_dbgid;
    static size_t _S_dbgnum;

public:
    debug_helper()
        : _M_dbgid{_S_dbgnum++}
    {}
};

size_t debug_helper::_S_dbgnum{};

inline std::string short_file(const std::string& __s)
{ return __s.substr(__s.find("polaris") + 8); }

#define POL_DBG_FUN(MSG) \
{ \
    std::experimental::source_location __sl = \
        std::experimental::source_location::current(); \
    std::cerr << short_file(__sl.file_name()) << ": " << __sl.line() << ": " \
        << __sl.function_name() << ": {" << (this->_M_dbgid) << "} "<< (MSG); \
    if (this->_M_dbgid >= debug_helper::_S_dbgnum) \
        std::cerr << " !!!!!!"; \
    std::cerr << '\n'; \
}

#define POL_DBG_VAR(MSG) debug_var(std::experimental::source_location \
    ::current(), this->_M_dbgid, (MSG))

void debug_var(const std::experimental::source_location& __sl,
    size_t __id, const std::string& __x)
{
    std::cerr << short_file(__sl.file_name()) << ": " << __sl.line() << ": "
        << __sl.function_name() << ": {" << __id << "} " << __x << '\n';
}
#else
#define POL_DBG_FUN(MSG)
#define POL_DBG_VAR(MSG) 0
#endif

}

#endif /* _POLLIB_DEBUG */
