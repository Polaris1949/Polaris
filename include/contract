// Contract library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     contract
 *  @brief    Contract library
 *  @author   Polaris Zhao
 *  @version  3.0
 *  @todo     Partial support.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_CONTRACT
#define _POLLIB_CONTRACT 1

#include <polaris/version>
#include <polaris/type>

#if __has_include(<experimental/source_location>)
#include <experimental/source_location>
#else
#error std::experimental::source_location support not found
#endif

#if POL_COMPAT
#ifdef NDEBUG
#define c_assert(__e) ((void)0)
#else
#define c_assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, \
						       __PRETTY_FUNCTION__, #__e))
#endif
#endif

#ifdef assert
#if POL_COMPAT
#undef assert
#else
#error assert macro found
#endif
#endif

namespace pol
{

using srcloc_t = std::experimental::source_location;

extern uint8_t __ctr_flag;

void
__ctr_set_conti(bool) noexcept;

bool
__ctr_get_conti() noexcept;

void
__ctr_set_level(uint8_t) noexcept;

uint8_t
__ctr_get_level() noexcept;

class contract
{
public:
	contract() = delete;
	contract(const char* __mode, uint8_t __level, bool __pred,
		const char* __type, const char* __msg, srcloc_t __loc) noexcept;

	const char* mode() const noexcept;
	uint8_t level() const noexcept;
	bool predicate() const noexcept;
	const char* type() const noexcept;
	const char* message() const noexcept;
	srcloc_t location() const noexcept;
	const char* file() const noexcept;
	const char* function() const noexcept;
	uint32_t line() const noexcept;
	uint32_t column() const noexcept;

private:
	const char* _M_mode;
    uint8_t _M_level;
    bool _M_pred;
    const char* _M_type;
    const char* _M_msg;
    srcloc_t _M_loc;
};

const char*
__ctr_level_str(uint8_t __lev) noexcept;

bool
__ctr_check(contract&& __c);

bool
assert(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

bool
expect(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

bool
ensure(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

}

// Deprecated features
#if __GNUC__ && defined(__PRETTY_FUNCTION__)
#define POL_SRCLOC_CURRENT_NEW \
	pol::srcloc_t::current(__FILE__, __PRETTY_FUNCTION__, __LINE__, 0)
#define POL_ASSERT(P) pol::assert((P), 0, 0, 1, POL_SRCLOC_CURRENT_NEW)
#define POL_EXPECT(P) pol::expect((P), 0, 0, 1, POL_SRCLOC_CURRENT_NEW)
#define POL_ENSURE(P) pol::ensure((P), 0, 0, 1, POL_SRCLOC_CURRENT_NEW)
#endif

#endif /* _POLLIB_CONTRACT */
