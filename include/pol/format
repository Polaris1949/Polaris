// Format support from third-party library -*- C++ -*-

// Copyright (C) 2004-2019 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     format
 *  @brief    Format support from third-party library
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @note     Require library from <https://github.com/fmtlib/fmt>.
 *  @attention  Add option @c -lfmt to link it.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_FORMAT
#define _POLLIB_FORMAT 1

#include <pol/version>

#if __has_include(<fmt/format.h>)
#include <string>
#include <string_view>
#include <utility>
#include <ostream>
#include <fmt/format.h>
#include <fmt/color.h>
#include <fmt/ostream.h>

namespace pol
{

/** @brief   Text formatter
 *  @return  A @c std::string of formatted result.
**/
template<typename... _Args>
[[nodiscard]] inline std::string
format(_Args&&... __args)
{ return fmt::format(std::forward<_Args&&>(__args)...); }

template<typename... _Args>
inline void
print(_Args&&... __args)
{ fmt::print(std::forward<_Args&&>(__args)...); }

template<typename... _Args>
inline void
println(const std::string& __fmt, _Args&&... __args)
{ fmt::print(__fmt, std::forward<_Args&&>(__args)...); fmt::print("\n"); }

template<typename... _Args>
inline void
println(std::FILE* __f, const std::string& __fmt, _Args&&... __args)
{ fmt::print(__f, __fmt, std::forward<_Args&&>(__args)...); fmt::print(__f, "\n"); }

class ftext;

inline std::ostream&
operator << (std::ostream& __out, const ftext& __x);

class ftext
{
public:
    ftext() = default;

    template<typename... _Args>
    ftext(fmt::text_style __s, const std::string& __fmt, _Args&&... __args);

    friend std::ostream&
    operator << (std::ostream& __out, const ftext& __x);

private:
    fmt::text_style _M_style;
    std::string _M_text;

    friend struct fmt::formatter<pol::ftext>;

    inline void
    _M_format(std::string_view __fmt);

    template<typename _Tp, typename... _Args>
    void
    _M_format(std::string_view __fmt, _Tp&& __a, _Args&&... __args);
};

template<typename... _Args>
ftext::
ftext(fmt::text_style __s, const std::string& __fmt, _Args&&... __args)
    : _M_style{__s}, _M_text{}
{ this->_M_format(std::string_view(__fmt), std::forward<_Args&&>(__args)...); }

void
ftext::
_M_format(std::string_view __fmt)
{ this->_M_text += format(this->_M_style, std::string(__fmt)); }

template<typename _Tp, typename... _Args>
void
ftext::
_M_format(std::string_view __fmt, _Tp&& __a, _Args&&... __args)
{
    auto __it = __fmt.begin();
    auto __last = __it;
    auto __end = __fmt.end();
    while (__it != __end && *__it != '{') ++__it;
    this->_M_text += format(this->_M_style, std::string(__last, __it));
    __last = __it;
    while (__it != __end && *__it != '}') ++__it;
    if (__it != __end) ++__it;
    if (typeid(_Tp) == typeid(ftext))
        this->_M_text += format(std::string(__last, __it), std::forward<_Tp&&>(__a));
    else
        this->_M_text += format(this->_M_style, std::string(__last, __it),
            std::forward<_Tp&&>(__a));
    this->_M_format(std::string_view(__it, __end), std::forward<_Args&&>(__args)...);
}

std::ostream&
operator << (std::ostream& __out, const ftext& __x)
{
    __out << __x._M_text;
    return __out;
}

namespace ftext_literals
{

class ftl_helper
{
public:
    ftl_helper(const char* __t) noexcept
        : _M_text(__t)
    { }

    ftext
    operator() (fmt::text_style __s)
    { return ftext(__s, this->_M_text); }

private:
    const char* _M_text;
};

ftl_helper
operator""_ft (const char* __t, size_t) noexcept
{ return ftl_helper(__t); }

}

}

namespace fmt
{

template<>
struct formatter<pol::ftext>
    : public formatter<std::string>
{
    constexpr auto parse(format_parse_context& __ctx)
    {
        auto __it = __ctx.begin();
        auto __end = __ctx.end();
        if (__it != __end && *__it != '}')
            throw format_error("invalid format");
        return __it;
    }

    template<typename _FormatContext>
    auto format(const pol::ftext& __x, _FormatContext& __ctx)
    { return formatter<std::string>::format(__x._M_text, __ctx); }
};

}
#else
#error required library not found
#endif

#endif /* _POLLIB_FORMAT */
