// Format support from third-party library -*- C++ -*-

// Copyright (C) 2004-2019 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     format
 *  @brief    Format support from third-party library
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @note     Require library from <https://github.com/fmtlib/fmt>.
 *  @attention  Add option @c -lfmt to link it.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_FORMAT
#define _POLLIB_FORMAT 1

#include <pol/version>

#if __has_include(<fmt/format.h>)
#include <string>
#include <utility>
#include <mutex>
#include <fmt/format.h>
#include <fmt/color.h>
#include <fmt/ostream.h>

namespace pol
{

/** @brief   Text formatter
 *  @return  A @c std::string of formatted result.
**/
template<typename... _Args>
[[nodiscard]] inline std::string
format(_Args&&... __args)
{ return fmt::format(std::forward<_Args&&>(__args)...); }

class ftext
{
public:
    ftext() = default;

    template<typename... _Args>
    ftext(fmt::text_style __s, _Args&&... __args);

    friend std::ostream&
    operator << (std::ostream& __out, const ftext& __x);

    friend std::ofstream&
    operator << (std::ofstream& __out, const ftext& __x);

private:
    fmt::text_style _M_style;
    std::string _M_text;
};

template<typename... _Args>
ftext::
ftext(fmt::text_style __s, _Args&&... __args)
    : _M_style{__s}, _M_text{format(std::forward<_Args&&>(__args)...)}
{ }

namespace __format
{
/** @brief  Global buffer for storing the result of @c cformat()
**/
extern std::string buffer;

#if POL_DEPRECATED
/** @brief  Global mutex for multi-thread support for @c cformat()
 *  @note   You shall invoke @c cfmt_lock() and @c cfmt_unlock()
 *          in order to control this mutex.
**/
[[deprecated]] extern std::mutex mutex; 
#endif
}

#if POL_DEPRECATED
/** @brief  Lock global mutex for @c cformat()
**/
[[deprecated]] void
cfmt_lock();

/** @brief  Unlock global mutex for @c cformat()
**/
[[deprecated]] void
cfmt_unlock();

/** @brief   Text formatter (C-style)
 *  @return  A C-style string of formatted result.
 *  @note    This function itself only supports single thread.
 *           In order to support multi-thread, you shall invoke
 *           @c cfmt_lock() before and @c cfmt_unlock() after
 *           invoking this function.
**/
template<typename... _Args>
[[deprecated]] [[nodiscard]] inline const char*
cformat(_Args&&... __args)
{
    __format::buffer = fmt::format(std::forward<_Args&&>(__args)...);
    return __format::buffer.data();
}
#endif

}
#else
#error required library not found
#endif

#endif /* _POLLIB_FORMAT */
