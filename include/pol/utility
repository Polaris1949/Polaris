// Utility library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     utility
 *  @brief    Utility library
 *  @author   Polaris Zhao
 *  @version  3.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_UTILTIY
#define _POLLIB_UTILTIY 1

#include <pol/version>
#include <utility>
#include <memory> // for std::addressof

namespace pol
{

template<typename _To, typename _From>
inline constexpr _To
bit_cast(_From& __x) noexcept
{
    static_assert(sizeof(_To) == sizeof(_From));
    return *reinterpret_cast<_To*>(std::addressof(__x));
}

template<typename _Tp>
inline constexpr bool
signbit(_Tp __x)
{
    static_assert(std::is_integral_v<_Tp>, "require an integral type");
    if constexpr (std::is_signed_v<_Tp>)
    {
        using _Unsigned_t = std::make_unsigned_t<_Tp>;
        return static_cast<_Unsigned_t>(__x)
            >> (std::numeric_limits<_Tp>::bits() - 1);
    }
    else return 0;
}

template<typename _Tp>
inline constexpr _Tp&
flip(_Tp& __x)
{ return __x = ~__x; }

template<typename _Tp>
inline _Tp
from_string(std::string_view __s) = delete;

template<>
inline std::string
from_string(std::string_view __s)
{ return std::string(__s.data(), __s.size()); }

}

#endif /* _POLLIB_UTILITY */
