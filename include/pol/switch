// Switch case components -*- C++ -*-

// Copyright (C) 2004-2019 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     switch
 *  @brief    Switch case components
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_SWITCH
#define _POLLIB_SWITCH 1

#include <pol/version>
#include <pol/type_traits>
#include <tuple>
#include <utility>

// Check for required features.
// {
#if __cpp_variadic_templates < 200704L
#error compiler variadic templates feature required
#endif
#if __cpp_return_type_deduction < 201304L
#error compiler return type deduction feature required
#endif
#if __cpp_if_constexpr < 201606L
#error compiler constexpr if feature required
#endif
// }

namespace pol
{

/** @brief   Primary template for switch support
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @param   __case     A pack of other cases.
 *  @return  The result of invoked object.
**/
template<typename _Tp, typename _Up, typename... _Vp>
auto
switch_case(_Tp&& __switch, _Up&& __default, _Vp&&... __case);

/** @brief   Invoke object for a default case
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @return  The result of invoked object.
 *  @note    An internal function.
**/
template<typename _Tp, typename _Up>
auto
__switch_impl(_Tp&& __switch, _Up&& __default);

/** @brief   Invoke object for a specific case,
 *           if switch value equals to case value
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @param   __current  A pair including a case value and an invokable object
 *                      for this specific case.
 *  @param   __case     A pack of other cases.
 *  @return  The result of invoked object.
 *  @note    An internal function.
**/
template<typename _Tp, typename _Up, typename... _Vp,
	typename _Ap, typename _Bp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::pair<_Ap, _Bp>&& __current, _Vp&&... __case);

/** @brief   Invoke object for a specific case,
 *           if switch value equals to one of case values
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @param   __current  A pair including a tuple of case values and an invkable
 *                      object for this specific case.
 *  @param   __case     A pack of other cases.
 *  @return  The result of invoked object.
 *  @note    An internal function.
**/
template<typename _Tp, typename _Up, typename... _Vp,
	typename... _Ap, typename _Bp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::pair<std::tuple<_Ap...>, _Bp>&& __current, _Vp&&... __case);

/** @brief   Invoke object for a specific case,
 *           if the value yielded by invoking another object with switch value
 *           as an argument, equals to case value
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @param   __current  A tuple including a case value, an invokable object
 *                      and another invokable object for yielding a value
 *                      with switch value as an argument.
 *  @return  The result of invoked object.
 *  @note    An internal function.
**/
template<typename _Tp, typename _Up, typename... _Vp,
	typename _Ap, typename _Bp, typename _Cp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::tuple<_Ap, _Bp, _Cp>&& __current, _Vp&&... __case);

/** @brief   Invoke object for a specific case,
 *           if the value yielded by invoking another object with switch value
 *           as an argument, equals to one of case values
 *  @param   __switch   A switch value.
 *  @param   __default  An invokable object for default case.
 *  @param   __current  A tuple including a tuple of case values, an invokable
 *                      object and another invokable object for yielding a
 *                      value with switch value as an argument.
 *  @return  The result of invoked object.
 *  @note    An internal function.
**/
template<typename _Tp, typename _Up, typename... _Vp,
	typename... _Ap, typename _Bp, typename _Cp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::tuple<std::tuple<_Ap...>, _Bp, _Cp>&& __current, _Vp&&... __case);

/** @brief  Check whether a value is in a tuple
 *  @param  __value  A value.
 *  @param  __tuple  A tuple.
**/
template<typename _Tp, typename... _Up>
bool
one_of(_Tp&& __value, std::tuple<_Up...>&& __tuple);

/** @brief  Check whether a value is in a tuple, when in range
 *  @param  __value  A value.
 *  @param  __tuple  A tuple.
**/
template<std::size_t __i, typename _Tp, typename... _Up,
	typename = std::enable_if_t<(__i < sizeof...(_Up))>>
bool
__one_of_impl(_Tp&& __value, std::tuple<_Up...>&& __tuple);

/** @brief  Check whether a value is in a tuple, when out of range
 *  @param  __value  A value.
 *  @param  __tuple  A tuple.
**/
template<std::size_t __i, typename _Tp, typename... _Up,
	typename = std::enable_if_t<(__i >= sizeof...(_Up))>,
	typename = void>
bool
__one_of_impl(_Tp&&, std::tuple<_Up...>&&);

template<typename _Tp, typename _Up, typename... _Vp>
auto
switch_case(_Tp&& __switch, _Up&& __default, _Vp&&... __case)
{
	return __switch_impl(std::forward<_Tp&&>(__switch),
		std::forward<_Up&&>(__default), std::forward<_Vp&&>(__case)...);
}

template<typename _Tp, typename _Up>
auto
__switch_impl(_Tp&&, _Up&& __default)
{ return __default(); }

template<typename _Tp, typename _Up, typename... _Vp,
	typename _Ap, typename _Bp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::pair<_Ap, _Bp>&& __current, _Vp&&... __case)
{
	if (__switch == __current.first)
		return __current.second();
	else
		return __switch_impl(std::forward<_Tp&&>(__switch),
			std::forward<_Up&&>(__default), std::forward<_Vp&&>(__case)...);
}

template<typename _Tp, typename _Up, typename... _Vp,
	typename... _Ap, typename _Bp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::pair<std::tuple<_Ap...>, _Bp>&& __current, _Vp&&... __case)
{
	if (one_of(std::forward<_Tp&&>(__switch),
			std::forward<std::tuple<_Ap...>&&>(__current.first)))
		return __current.second();
	else
		return __switch_impl(std::forward<_Tp&&>(__switch),
			std::forward<_Up&&>(__default), std::forward<_Vp&&>(__case)...);
}

template<typename _Tp, typename _Up, typename... _Vp,
	typename _Ap, typename _Bp, typename _Cp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::tuple<_Ap, _Bp, _Cp>&& __current, _Vp&&... __case)
{
	if (std::get<2>(__current)(__switch) == std::get<0>(__current))
		return std::get<1>(__current)();
	else
		return __switch_impl(std::forward<_Tp&&>(__switch),
			std::forward<_Up&&>(__default), std::forward<_Vp&&>(__case)...);
}

template<typename _Tp, typename _Up, typename... _Vp,
	typename... _Ap, typename _Bp, typename _Cp>
auto
__switch_impl(_Tp&& __switch, _Up&& __default,
	std::tuple<std::tuple<_Ap...>, _Bp, _Cp>&& __current, _Vp&&... __case)
{
	if (one_of(std::forward<_Cp&&>(std::get<2>(__current)(__switch)),
			std::forward<std::tuple<_Ap...>&&>(std::get<0>(__current))))
		return std::get<1>(__current)();
	else
		return __switch_impl(std::forward<_Tp&&>(__switch),
			std::forward<_Up&&>(__default), std::forward<_Vp&&>(__case)...);
}

template<typename _Tp, typename... _Up>
bool
one_of(_Tp&& __value, std::tuple<_Up...>&& __tuple)
{
	return __one_of_impl<0>(std::forward<_Tp&&>(__value),
		std::forward<std::tuple<_Up...>&&>(__tuple));
}

template<std::size_t __i, typename _Tp, typename... _Up,
	typename = std::enable_if_t<(__i < sizeof...(_Up))>>
bool
__one_of_impl(_Tp&& __value, std::tuple<_Up...>&& __tuple)
{
	if constexpr (is_equality_comparable_with_v<_Tp,
			std::tuple_element_t<__i, std::tuple<_Up...>>>)
		if (__value == std::get<__i>(__tuple))
			return true;

	return __one_of_impl<__i + 1>(std::forward<_Tp&&>(__value),
		std::forward<std::tuple<_Up...>&&>(__tuple));
}

template<std::size_t __i, typename _Tp, typename... _Up,
	typename = std::enable_if_t<(__i >= sizeof...(_Up))>,
	typename = void>
bool
__one_of_impl(_Tp&&, std::tuple<_Up...>&&)
{ return false; }

}

#endif /* _POLLIB_SWITCH */
