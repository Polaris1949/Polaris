// Terminal support for ANSI escape sequence -*- C++ -*-

// Copyright (C) 2004-2019 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file        terminal
 *  @brief       Terminal support for ANSI escape sequence
 *  @author      Polaris Zhao
 *  @version     0.8.0
 *  @warning     You should @b NOT use this library on a system whose
 *               terminal does not support ANSI escape sequence.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_TERMINAL
#define _POLLIB_TERMINAL 1

#include <pol/version>

namespace pol
{

class terminal
{
public:
    static void move_up(int __n = 1);
    static void move_down(int __n = 1);
    static void move_right(int __n = 1);
    static void move_left(int __n = 1);
    static void next_line(int __n = 1);
    static void prev_line(int __n = 1);
    static void locate_column(int __p = 0);
    static void locate(int __x = 0, int __y = 0);
    static void erase_screen(int __m = 0);
    static void clear_screen();
    static void erase_line(int __m = 0);
    static void clear_line();
    static void scroll_up(int __n = 1);
    static void scroll_down(int __n = 1);
    static void save_cursor();
    static void restore_cursor();
    static void reset();

    static void normal();
    static void bold();
    static void faint();
    static void italic();
    static void underline();
    static void color_reverse();
    static void crossline();
    static void overline();

    static void color_fg(int __x);
    static void color_fg_def();
    static void color_bg(int __x);
    static void color_bg_def();
    static void show_cursor();
    static void hide_cursor();
    static void resize_screen(int __n, int __m);

    static void flush();
};

}

#endif /* _POLLIB_TERMINAL */
