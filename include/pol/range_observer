// Range observer with offset for sequence container -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     range_observer
 *  @brief    Range observer with offset for sequence container
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @todo     Revision.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_RANGE_OBSERVER
#define _POLLIB_RANGE_OBSERVER 1

#include <pol/version>
#include <type_traits>

namespace pol
{

template<typename _Tp>
class range_observer
{
public:
    typedef _Tp                       container_type;
    typedef typename _Tp::value_type  value_type;
    typedef typename _Tp::size_type   size_type;
    typedef typename std::make_signed<typename \
        _Tp::size_type>::type         off_type;
    typedef typename std::make_signed<typename \
        _Tp::size_type>::type         pos_type;

private:
    container_type _M_c;
    off_type _M_o;

public:
    range_observer();
    range_observer(const container_type& __c);
    range_observer(const container_type& __c, off_type __o);
    ~range_observer() noexcept = default;

    value_type& operator[] (pos_type __p);
    const value_type& operator[] (pos_type __p) const;
};

template<typename _Tp>
range_observer<_Tp>::
range_observer()
    : _M_c(), _M_o()
{
}

template<typename _Tp>
range_observer<_Tp>::
range_observer(const container_type& __c)
    : _M_c(__c), _M_o()
{
}

template<typename _Tp>
range_observer<_Tp>::
range_observer(const container_type& __c, off_type __o)
    : _M_c(__c), _M_o(__o)
{
}

template<typename _Tp>
typename _Tp::value_type&
range_observer<_Tp>::
operator[] (pos_type __p)
{
    return _M_c[size_type(__p + _M_o)];
}

template<typename _Tp>
const typename _Tp::value_type&
range_observer<_Tp>::
operator[] (pos_type __p) const
{
    return _M_c[size_type(__p + _M_o)];
}

}

#endif /* _POLLIB_RANGE_OBSERVER */
