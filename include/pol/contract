// Contract library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     contract
 *  @brief    Contract library
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @todo     Partial support.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_CONTRACT
#define _POLLIB_CONTRACT 1

#include <pol/version>
#include <pol/type>
#include <string>
#include <utility> // for std::move

#if __has_include(<source_location>)
#include <source_location>              // C++ 20
namespace pol { using srcloc_t = std::source_location; }
#elif __has_include(<experimental/source_location>)
#include <experimental/source_location> // LF TS v2
namespace pol { using srcloc_t = std::experimental::source_location; }
#else
#error source_location support not found
#endif

#if POL_COMPAT
#ifdef NDEBUG
#define c_assert(__e) ((void)0)
#else
#define c_assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, \
                               __PRETTY_FUNCTION__, #__e))
#endif
#endif

#ifdef assert
#if POL_COMPAT
#undef assert
#else
#error assert macro found
#endif
#endif

namespace pol
{

extern uint8_t __ctr_flag;

void
__ctr_set_conti(bool) noexcept;

bool
__ctr_get_conti() noexcept;

void
__ctr_set_level(uint8_t) noexcept;

uint8_t
__ctr_get_level() noexcept;

// TODO: Make APIs take std::string as an argument
// Keep constexpr functions, but not a constexpr class

class contract
{
public:
    contract() = delete;

    inline
    contract(uint8_t __mode, uint8_t __level, uint16_t __code,
        const std::string& __type, const std::string& __msg,
        srcloc_t __loc) noexcept;

    inline uint8_t
    mode_n() const noexcept;

    inline const char*
    mode() const noexcept;

    inline uint8_t
    level_n() const noexcept;

    inline const char*
    level() const noexcept;

    inline uint16_t
    code() const noexcept;

    inline std::string
    type() const noexcept;

    inline std::string
    message() const noexcept;

    [[deprecated]] inline srcloc_t
    location() const noexcept;

    inline const char*
    file() const noexcept;

    inline const char*
    function() const noexcept;

    inline uint32_t
    line() const noexcept;

    inline uint32_t
    column() const noexcept;

private:
    std::string _M_type;
    std::string _M_msg;
    srcloc_t _M_loc;
    uint8_t _M_mode;
    uint8_t _M_level;
    uint16_t _M_code;
};

constexpr const char*
__ctr_mode_string(uint8_t __mode) noexcept;

constexpr const char*
__ctr_level_string(uint8_t __lev) noexcept;

void
__ctr_violate(contract&& __c);

using __ctr_handler_t = void(*)(contract&&);

void
__ctr_set_handler(__ctr_handler_t __h) noexcept;

__ctr_handler_t
__ctr_get_handler() noexcept;

void
__assert_violate(const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

void
__expect_violate(const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

void
__ensure_violate(const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

constexpr bool
assert(bool __pred, const char* __type, const char* __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

inline void
assert(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

constexpr bool
expect(bool __pred, const char* __type, const char* __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

inline void
expect(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

constexpr bool
ensure(bool __pred, const char* __type, const char* __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

inline void
ensure(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code = 0, uint8_t __level = 1,
    srcloc_t __loc = srcloc_t::current());

contract::
contract(uint8_t __mode, uint8_t __level, uint16_t __code,
    const std::string& __type, const std::string& __msg,
    srcloc_t __loc) noexcept
    : _M_type{__type}, _M_msg{__msg}, _M_loc{__loc},
        _M_mode{__mode}, _M_level{__level}, _M_code{__code}
{ }

uint8_t
contract::
mode_n() const noexcept
{ return this->_M_mode; }

const char*
contract::
mode() const noexcept
{ return __ctr_mode_string(this->_M_mode); }

uint8_t
contract::
level_n() const noexcept
{ return this->_M_level; }

const char*
contract::
level() const noexcept
{ return __ctr_level_string(this->_M_level); }

uint16_t
contract::
code() const noexcept
{ return this->_M_code; }

std::string
contract::
type() const noexcept
{ return this->_M_type; }

std::string
contract::
message() const noexcept
{ return this->_M_msg; }

srcloc_t
contract::
location() const noexcept
{ return this->_M_loc; }

const char*
contract::
file() const noexcept
{ return this->_M_loc.file_name(); }

const char*
contract::
function() const noexcept
{ return this->_M_loc.function_name(); }

uint32_t
contract::
line() const noexcept
{ return this->_M_loc.line(); }

uint32_t
contract::
column() const noexcept
{ return this->_M_loc.column(); }

constexpr const char*
__ctr_mode_string(uint8_t __mode) noexcept
{
    switch (__mode)
    {
        case 0: return "assert";
        case 1: return "expect";
        case 2: return "ensure";
        default: return "bad";
    }
}

constexpr const char*
__ctr_level_string(uint8_t __lev) noexcept
{
    switch (__lev)
    {
        case 0: return "axiom";
        case 1: return "default";
        case 2: return "audit";
        case 3: return "always";
        default: return "bad";
    }
}

constexpr bool
assert(bool __pred, const char* __type, const char* __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __assert_violate(__type, __msg, __code, __level, __loc);
    return __pred;
}

inline void
assert(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __assert_violate(__type, __msg, __code, __level, __loc);
}

constexpr bool
expect(bool __pred, const char* __type, const char* __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __expect_violate(__type, __msg, __code, __level, __loc);
    return __pred;
}

inline void
expect(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __expect_violate(__type, __msg, __code, __level, __loc);
}

constexpr bool
ensure(bool __pred, const char* __type, const char* __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __ensure_violate(__type, __msg, __code, __level, __loc);
    return __pred;
}

inline void
ensure(bool __pred, const std::string& __type, const std::string& __msg,
    uint16_t __code, uint8_t __level, srcloc_t __loc)
{
    if (!__pred)
        __ensure_violate(__type, __msg, __code, __level, __loc);
}

}

// Pretty-print support
#if __GNUC__
#define __POL_SCP \
    pol::srcloc_t::current(__FILE__, __PRETTY_FUNCTION__, __LINE__, 0)
#else
#define __POL_SCP pol::srcloc_t::current()
#endif

// Contract macros
#define POL_ASSERT(P, T, M, C) pol::assert(P, T, M, C, 1, __POL_SCP)
#define POL_EXPECT(P, T, M, C) pol::expect(P, T, M, C, 1, __POL_SCP)
#define POL_ENSURE(P, T, M, C) pol::ensure(P, T, M, C, 1, __POL_SCP)
#define POL_ASSERT_X(P, T, M, C) pol::assert(P, T, M, C, 2, __POL_SCP)
#define POL_EXPECT_X(P, T, M, C) pol::expect(P, T, M, C, 2, __POL_SCP)
#define POL_ENSURE_X(P, T, M, C) pol::ensure(P, T, M, C, 2, __POL_SCP)
#define POL_ASSERT_E(P, M) pol::assert(P, "assert " #P " failure", M, 0, 1, __POL_SCP)
#define POL_EXPECT_E(P, M) pol::expect(P, "expect " #P " failure", M, 0, 1, __POL_SCP)
#define POL_ENSURE_E(P, M) pol::ensure(P, "ensure " #P " failure", M, 0, 1, __POL_SCP)

#endif /* _POLLIB_CONTRACT */
