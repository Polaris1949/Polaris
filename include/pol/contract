// Contract library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     contract
 *  @brief    Contract library
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @todo     Partial support.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_CONTRACT
#define _POLLIB_CONTRACT 1

#include <pol/version>
#include <pol/type>
#include <utility> // for std::move

#if __has_include(<experimental/source_location>)
#include <experimental/source_location>
#else
#error std::experimental::source_location support not found
#endif

#if POL_COMPAT
#ifdef NDEBUG
#define c_assert(__e) ((void)0)
#else
#define c_assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, \
						       __PRETTY_FUNCTION__, #__e))
#endif
#endif

#ifdef assert
#if POL_COMPAT
#undef assert
#else
#error assert macro found
#endif
#endif

namespace pol
{

using srcloc_t = std::experimental::source_location;

extern uint8_t __ctr_flag;

void
__ctr_set_conti(bool) noexcept;

bool
__ctr_get_conti() noexcept;

void
__ctr_set_level(uint8_t) noexcept;

uint8_t
__ctr_get_level() noexcept;

class contract
{
public:
	contract() = delete;

	constexpr
	contract(const char* __mode, uint8_t __level,
		const char* __type, const char* __msg, srcloc_t __loc) noexcept;

	constexpr const char*
	mode() const noexcept;

	constexpr uint8_t
	level() const noexcept;

	constexpr const char*
	type() const noexcept;

	constexpr const char*
	message() const noexcept;

	constexpr srcloc_t
	location() const noexcept;

	constexpr const char*
	file() const noexcept;

	constexpr const char*
	function() const noexcept;

	constexpr uint32_t
	line() const noexcept;

	constexpr uint32_t
	column() const noexcept;

private:
	const char* _M_mode;
    const char* _M_type;
    const char* _M_msg;
    srcloc_t _M_loc;
    uint8_t _M_level;
};

constexpr const char*
__ctr_level_string(uint8_t __lev) noexcept;

void
__ctr_violate(contract&& __c);

void
__assert_violate(const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

void
__expect_violate(const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

void
__ensure_violate(const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

constexpr bool
assert(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

constexpr bool
expect(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

constexpr bool
ensure(bool __pred, const char* __type, const char* __msg,
    uint8_t __level = 1, srcloc_t __loc = srcloc_t::current());

constexpr
contract::
contract(const char* __mode, uint8_t __level,
    const char* __type, const char* __msg, srcloc_t __loc) noexcept
    : _M_mode{__mode ? __mode : "bad"}, _M_type{__type},
        _M_msg{__msg}, _M_loc{__loc}, _M_level{__level}
{ }

constexpr const char*
contract::
mode() const noexcept
{ return this->_M_mode; }

constexpr uint8_t
contract::
level() const noexcept
{ return this->_M_level; }

constexpr const char*
contract::
type() const noexcept
{ return this->_M_type; }

constexpr const char*
contract::
message() const noexcept
{ return this->_M_msg; }

constexpr srcloc_t
contract::
location() const noexcept
{ return this->_M_loc; }

constexpr const char*
contract::
file() const noexcept
{ return this->_M_loc.file_name(); }

constexpr const char*
contract::
function() const noexcept
{ return this->_M_loc.function_name(); }

constexpr uint32_t
contract::
line() const noexcept
{ return this->_M_loc.line(); }

constexpr uint32_t
contract::
column() const noexcept
{ return this->_M_loc.column(); }

constexpr const char*
__ctr_level_string(uint8_t __lev) noexcept
{
    switch (__lev)
    {
        case 0: return "axiom";
        case 1: return "default";
        case 2: return "audit";
        case 3: return "always";
        default: return "bad";
    }
}

constexpr bool
assert(bool __pred, const char* __type, const char* __msg,
    uint8_t __level, srcloc_t __loc)
{
    if (!__pred) __assert_violate(__type, __msg, __level, __loc);
    return __pred;
}

constexpr bool
expect(bool __pred, const char* __type, const char* __msg,
    uint8_t __level, srcloc_t __loc)
{
    if (!__pred) __expect_violate(__type, __msg, __level, __loc);
    return __pred;
}

constexpr bool
ensure(bool __pred, const char* __type, const char* __msg,
    uint8_t __level, srcloc_t __loc)
{
    if (!__pred) __ensure_violate(__type, __msg, __level, __loc);
    return __pred;
}

}

// Pretty-print support
#if __GNUC__
#define __POL_SCP \
	pol::srcloc_t::current(__FILE__, __PRETTY_FUNCTION__, __LINE__, 0)
#else
#define __POL_SCP pol::srcloc_t::current()
#endif
#define POL_ASSERT(P, T, M)   pol::assert((P), (T), (M), 1, __POL_SCP)
#define POL_EXPECT(P, T, M)   pol::expect((P), (T), (M), 1, __POL_SCP)
#define POL_ENSURE(P, T, M)   pol::ensure((P), (T), (M), 1, __POL_SCP)
#define POL_ASSERT_X(P, T, M) pol::assert((P), (T), (M), 2, __POL_SCP)
#define POL_EXPECT_X(P, T, M) pol::expect((P), (T), (M), 2, __POL_SCP)
#define POL_ENSURE_X(P, T, M) pol::ensure((P), (T), (M), 2, __POL_SCP)

#endif /* _POLLIB_CONTRACT */
