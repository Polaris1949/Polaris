// Library concepts -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     concepts
 *  @brief    Concepts library
 *  @author   Polaris Zhao
 *  @version  0.8.0
 *  @note     Your compiler shall support C++20 or Concepts TS.
 *  @todo     This library is incompelete.
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_CONCEPTS
#define _POLLIB_CONCEPTS 1

#include <pol/version>
#include <functional>
#include <utility>
#include <pol/type_traits>

#if __cpp_concepts
#if POL_REQ_CPPVER(2a)
// C++20 support
#define _POL_CONCEPTS_SUPPORT 2
// #include <concepts>
#else
// Concepts TS support
#define _POL_CONCEPTS_SUPPORT 1
#define concept concept bool
#endif /* C++20 */
#else
#define _POL_CONCEPTS_SUPPORT 0
#endif

#if _POL_CONCEPTS_SUPPORT
namespace pol
{

template<typename _Tp, typename _Up>
concept __is_same_c = std::is_same_v<_Tp, _Up>;

template<typename _Tp>
concept has_allocate = requires(_Tp __x, size_t __n)
{ {__x.allocate(__n)}->__is_same_c<void*>; };

template<typename _Tp>
concept has_typed_allocate = requires(_Tp __x, size_t __n)
{ {__x.allocate(__n)}->__is_same_c<typename _Tp::value_type*>; };

template<typename _Tp>
concept has_deallocate_1 = requires(_Tp __x, void* __p)
{ {__x.deallocate(__p)}->__is_same_c<void>; };

template<typename _Tp>
concept has_deallocate_2 = requires(_Tp __x, void* __p, size_t __n)
{ {__x.deallocate(__p, __n)}->__is_same_c<void>; };

template<typename _Tp>
concept has_deallocate = has_deallocate_1<_Tp> || has_deallocate_2<_Tp>;

template<typename _Tp>
concept has_typed_deallocate_1 = requires(_Tp __x, typename _Tp::value_type* __p)
{ {__x.deallocate(__p)}->__is_same_c<void>; };

template<typename _Tp>
concept has_typed_deallocate_2 = requires(_Tp __x, typename _Tp::value_type* __p, size_t __n)
{ {__x.deallocate(__p, __n)}->__is_same_c<void>; };

template<typename _Tp>
concept has_typed_deallocate = has_typed_deallocate_1<_Tp> || has_typed_deallocate_2<_Tp>;

template<typename _Tp>
concept has_reallocate = requires(_Tp __x, void* __p, size_t __n)
{ {__x.reallocate(__p, __n)}->__is_same_c<void*>; };

template<typename _Tp>
concept is_weak_allocator = has_allocate<_Tp> && has_deallocate<_Tp>;

template<typename _Tp>
concept is_allocator = is_weak_allocator<_Tp> && has_reallocate<_Tp>;

template<typename _Tp>
concept is_std_allocator = has_typed_allocate<_Tp> && has_typed_deallocate<_Tp>;

} // namespace pol
#else
#error no available support for concepts library
#endif /* !__cpp_concepts */

#if _POL_CONCEPTS_SUPPORT == 1
#undef concept
#endif /* Concepts TS */

#endif /* _POLLIB_CONCEPTS */
