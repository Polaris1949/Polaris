// Library concepts -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file concepts
 *  This is a Polaris C++ Library header.
 */

// Written by Jingyu Zhao.

#ifndef _POLLIB_CONCEPTS
#define _POLLIB_CONCEPTS 1

#pragma GCC system_header

#include <type_traits>

#ifndef __cpp_concepts
#define concept constexpr
#endif /* !__cpp_concepts */

namespace polaris
{
namespace concepts
{

template<typename _Tp>
concept bool DefaultConstructible
	= std::is_default_constructible<_Tp>::value;

template<typename _Tp>
concept bool MoveConstructible
	= std::is_move_constructible<_Tp>::value;

template<typename _Tp>
concept bool CopyConstructible
	= std::is_copy_constructible<_Tp>::value;

template<typename _Tp>
concept bool MoveAssignable
	= std::is_move_assignable<_Tp>::value;

template<typename _Tp>
concept bool CopyAssignable
	= std::is_copy_assignable<_Tp>::value;

template<typename _Tp>
concept bool Destructible
	= std::is_destructible<_Tp>::value;

template<typename _Tp>
concept bool TriviallyCopyable
	= std::is_trivially_copyable<_Tp>::value;

template<typename _Tp>
concept bool TrivialType
	= std::is_trivial<_Tp>::value;

template<typename _Tp>
concept bool StandardLayoutType
	= std::is_standard_layout<_Tp>::value;

template<typename _Tp>
concept bool PODType
	= std::is_pod<_Tp>::value;

} // namespace concepts
} // namespace polaris

#ifdef __cpp_concepts
#include <utility>

namespace polaris
{
namespace concepts
{

template<typename _Tp>
concept bool EqualityComparable = requires(_Tp __x, _Tp __y)
	{{__x == __y} -> bool;};

template<typename _Tp>
concept bool LessThanComparable = requires(_Tp __x, _Tp __y)
	{{__x < __y} -> bool;};

template<typename _Tp>
concept bool Swappable = requires(_Tp __x, _Tp __y)
	{std::swap(__x, __y);};

template<typename _Iter>
concept bool Iterator = requires(_Iter __x)
	{{*__x} -> auto&&;};

} // namespace concepts
} // namespace polaris

#endif /* __cpp_concepts */

#ifndef __cpp_concepts
#undef concept
#endif /* !__cpp_concepts */

#endif /* _POLLIB_CONCEPTS */
