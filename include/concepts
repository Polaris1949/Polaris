// Library concepts -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file concepts
 *  This is a Polaris C++ Library header.
 */

// Written by Jingyu Zhao.

#ifndef _POLLIB_CONCEPTS
#define _POLLIB_CONCEPTS 1

#pragma GCC system_header

#include <polaris/version>
#include <functional>
#include <type_traits>
#include <utility>

#if __cpp_concepts
#if __cplusplus >= 202000L
// C++20 available support
#else
#define concept concept bool
// Concepts TS available support
#endif /* C++20 */
#else
#error no available support for this library
#endif /* !__cpp_concepts */

namespace std
{

// @FIXME
// @{
template<typename... _Tp>
struct common_reference
{
	using type = common_type_t<_Tp...>;
};

template<typename... _Tp>
using common_reference_t = typename common_reference<_Tp...>::type;

template<typename _Tp>
struct remove_cvref
{
	using type = remove_reference_t<remove_cv_t<_Tp>>;
};

template<typename _Tp>
using remove_cvref_t = typename remove_cvref<_Tp>::type;
// @}

}

namespace polaris
{
inline namespace concepts
{

template<typename _Tp, typename _Up>
concept Same = std::is_same_v<_Tp, _Up>;

template<typename _Derived, typename _Base>
concept DerivedFrom = std::is_base_of_v<_Base, _Derived> &&
	std::is_convertible_v<const volatile _Derived*, const volatile _Base*>;

template<typename _From, typename _To>
concept ConvertibleTo = std::is_convertible_v<_From, _To> &&
	requires(_From (&__f)()) { static_cast<_To>(__f()); };

template<typename _Tp, typename _Up>
concept CommonReference = Same<std::common_reference_t<_Tp, _Up>,
	std::common_reference_t<_Up, _Tp>> &&
	ConvertibleTo<_Tp, std::common_reference_t<_Tp, _Up>> &&
	ConvertibleTo<_Up, std::common_reference_t<_Tp, _Up>>;

template<typename _Tp, typename _Up>
concept Common = Same<std::common_type_t<_Tp, _Up>,
		std::common_type_t<_Up, _Tp>> &&
	ConvertibleTo<_Tp, std::common_type_t<_Tp, _Up>> &&
	ConvertibleTo<_Up, std::common_type_t<_Tp, _Up>> &&
	CommonReference<
		std::add_lvalue_reference_t<const _Tp>,
		std::add_lvalue_reference_t<const _Up>> &&
	CommonReference<
		std::add_lvalue_reference_t<std::common_type_t<_Tp, _Up>>,
		std::common_reference_t<
		std::add_lvalue_reference_t<const _Tp>,
		std::add_lvalue_reference_t<const _Up>>>;

template<typename _Tp>
concept Integral = std::is_integral_v<_Tp>;

template<typename _Tp>
concept SignedIntegral = Integral<_Tp> && std::is_signed_v<_Tp>;

template<typename _Tp>
concept UnsignedIntegral = Integral<_Tp> && !SignedIntegral<_Tp>;

template<typename _LHS, typename _RHS>
concept Assignable = std::is_lvalue_reference_v<_LHS> &&
	CommonReference<const std::remove_reference_t<_LHS>&,
		const std::remove_reference_t<_RHS>&> &&
	requires(_LHS __lhs, _RHS&& __rhs)
	{
		__lhs = std::forward<_RHS>(__rhs);
		requires Same<decltype(__lhs = std::forward<_RHS>(__rhs)), _LHS>;
	};

template<typename _Tp>
concept Swappable = std::is_swappable_v<_Tp>;

template<typename _Tp, typename _Up>
concept SwappableWith = std::is_swappable_with_v<_Tp, _Tp> &&
	std::is_swappable_with_v<_Up, _Up> &&
	CommonReference<const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&> &&
	std::is_swappable_with_v<_Tp, _Up> &&
	std::is_swappable_with_v<_Up, _Tp>;

template<typename _Tp>
concept Destructible = std::is_nothrow_destructible_v<_Tp>;

template<typename _Tp, typename... _Args>
concept Constructible = Destructible<_Tp> &&
	std::is_constructible_v<_Tp, _Args...>;

template<typename _Tp>
concept DefaultConstructible = Constructible<_Tp>;

template<typename _Tp>
concept MoveConstructible = Constructible<_Tp, _Tp> && ConvertibleTo<_Tp, _Tp>;

template<typename _Tp>
concept CopyConstructible = MoveConstructible<_Tp> &&
	Constructible<_Tp, _Tp&> && ConvertibleTo<_Tp&, _Tp> &&
	Constructible<_Tp, const _Tp&> && ConvertibleTo<const _Tp&, _Tp> &&
	Constructible<_Tp, const _Tp> && ConvertibleTo<const _Tp, _Tp>;

template<typename _Tp>
concept Movable = std::is_object_v<_Tp> && MoveConstructible<_Tp> &&
	Assignable<_Tp&, _Tp> && Swappable<_Tp>;

template<typename _Bp>
concept Boolean = Movable<std::remove_cvref_t<_Bp>> &&
	requires(const std::remove_reference_t<_Bp>& __b1,
		const std::remove_reference_t<_Bp>& __b2, const bool __a)
	{
		requires ConvertibleTo<const std::remove_reference_t<_Bp>&, bool>;
		!__b1;        requires ConvertibleTo<decltype(!__b1), bool>;
		__b1 && __a;  requires Same<decltype(__b1 && __a), bool>;
		__b1 || __a;  requires Same<decltype(__b1 || __a), bool>;
		__b1 && __b2; requires Same<decltype(__b1 && __b2), bool>;
		__a && __b2;  requires Same<decltype(__a && __b2), bool>;
		__b1 || __b2; requires Same<decltype(__b1 || __b2), bool>;
		__a || __b2;  requires Same<decltype(__a || __b2), bool>;
		__b1 == __b2; requires ConvertibleTo<decltype(__b1 == __b2), bool>;
		__b1 == __a;  requires ConvertibleTo<decltype(__b1 == __a), bool>;
		__a == __b2;  requires ConvertibleTo<decltype(__a == __b2), bool>;
		__b1 != __b2; requires ConvertibleTo<decltype(__b1 != __b2), bool>;
		__b1 != __a;  requires ConvertibleTo<decltype(__b1 != __a), bool>;
		__a != __b2;  requires ConvertibleTo<decltype(__a != __b2), bool>;
	};

template<typename _Tp, typename _Up>
concept __WeaklyEqualityComparableWith = // For exposition only
	requires(const std::remove_reference_t<_Tp>& __t,
		const std::remove_reference_t<_Up>& __u)
	{
		__t == __u; requires Boolean<decltype(__t == __u)>;
		__t != __u; requires Boolean<decltype(__t != __u)>;
		__u == __t; requires Boolean<decltype(__u == __t)>;
		__u != __t; requires Boolean<decltype(__u != __t)>;
	};

template<typename _Tp>
concept EqualityComparable = __WeaklyEqualityComparableWith<_Tp, _Tp>;

template<typename _Tp, typename _Up>
concept EqualityComparableWith = EqualityComparable<_Tp> &&
	EqualityComparable<_Up> &&
	CommonReference<const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&> &&
	EqualityComparable<std::common_reference_t<
		const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&>> &&
	__WeaklyEqualityComparableWith<_Tp, _Up>;

template<typename _Tp>
concept StrictTotallyOrdered = EqualityComparable<_Tp> &&
	requires(const std::remove_reference_t<_Tp>& __a,
		const std::remove_reference_t<_Tp>& __b)
	{
		__a < __b;  requires Boolean<decltype(__a < __b)>;
		__a > __b;  requires Boolean<decltype(__a > __b)>;
		__a <= __b; requires Boolean<decltype(__a <= __b)>;
		__a >= __b; requires Boolean<decltype(__a >= __b)>;
	};

template<typename _Tp, typename _Up>
concept StrictTotallyOrderedWith = StrictTotallyOrdered<_Tp> &&
	StrictTotallyOrdered<_Up> &&
	CommonReference<const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&> &&
	StrictTotallyOrdered<std::common_reference_t<
		const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&>> &&
	EqualityComparableWith<_Tp, _Up> &&
	requires(const std::remove_reference_t<_Tp>& __t,
		const std::remove_reference_t<_Up>& __u)
	{
		__t < __u;  requires Boolean<decltype(__t < __u)>;
		__t > __u;  requires Boolean<decltype(__t > __u)>;
		__t <= __u; requires Boolean<decltype(__t <= __u)>;
		__t >= __u; requires Boolean<decltype(__t >= __u)>;
		__u < __t;  requires Boolean<decltype(__u < __t)>;
		__u > __t;  requires Boolean<decltype(__u > __t)>;
		__u <= __t; requires Boolean<decltype(__u <= __t)>;
		__u >= __t; requires Boolean<decltype(__u >= __t)>;
	};

/* @FIXME
template<typename _Tp>
concept Movable = std::is_object_v<_Tp> && MoveConstructible<_Tp> &&
	Assignable<_Tp&, _Tp> && Swappable<_Tp>;
*/

template<typename _Tp>
concept Copyable = CopyConstructible<_Tp> && Movable<_Tp> &&
	Assignable<_Tp&, const _Tp&>;

template<typename _Tp>
concept Semiregular = Copyable<_Tp> && DefaultConstructible<_Tp>;

template<typename _Tp>
concept Regular = Semiregular<_Tp> && EqualityComparable<_Tp>;

template<typename _Fp, typename... _Args>
concept Invocable =
	requires(_Fp&& __f, _Args&&... __args)
	{
		std::invoke(std::forward<_Fp>(__f), std::forward<_Args>(__args)...);
		/* not required to be equality preserving */
	};

template<typename _Fp, typename... _Args>
concept RegularInvocable = Invocable<_Fp, _Args...>;

template<typename _Fp, typename... _Args>
concept Predicate = RegularInvocable<_Fp, _Args...> &&
	Boolean<std::invoke_result_t<_Fp, _Args...>>;

template<typename _Rp, typename _Tp, typename _Up>
concept Relation = Predicate<_Rp, _Tp, _Tp> && Predicate<_Rp, _Up, _Up> &&
	CommonReference<const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&> &&
	Predicate<_Rp, std::common_reference_t<
		const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&>,
		std::common_reference_t<const std::remove_reference_t<_Tp>&,
		const std::remove_reference_t<_Up>&>> &&
	Predicate<_Rp, _Tp, _Up> && Predicate<_Rp, _Up, _Tp>;

template<typename _Rp, typename _Tp, typename _Up>
concept StrictWeakOrder = Relation<_Rp, _Tp, _Up>;

} // namespace concepts
} // namespace polaris

#if __cpp_concepts && __cplusplus < 202000L
#undef concept
#endif /* Concepts TS */

#endif /* _POLLIB_CONCEPTS */
