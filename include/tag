// Tags to specify concepts -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file tag
 *  This is a Polaris C++ Library header.
 */

// Written by Jingyu Zhao.

#ifndef _POLLIB_TAG
#define _POLLIB_TAG 1

#include <polaris/version>
#include <tuple>

#pragma GCC system_header

namespace polaris
{

template<typename _Tp>
class tag
{
public:
	typedef _Tp value_tag;

private:
	_Tp* _M_t;

public:
	tag();
	tag(value_tag* __tag);

	const value_tag& operator* () const;
	value_tag* operator-> () const;
};

template<typename _Tp>
tag<_Tp>::
tag()
	: _M_t(nullptr)
{
}

template<typename _Tp>
tag<_Tp>::
tag(value_tag* __tag)
	: _M_t(__tag)
{
}

template<typename _Tp>
const _Tp&
tag<_Tp>::
operator* () const
{
	return *_M_t;
}

template<typename _Tp>
_Tp*
tag<_Tp>::
operator-> () const
{
	return _M_t;
}

template<typename _Tp, typename... _Tags>
class tvalue
{
public:
	typedef _Tp value_type;
	typedef std::tuple<_Tags...> tags_type;

	constexpr static size_t tags_size = std::tuple_size<tags_type>::value;

	template<size_t __i>
	using tag_type = typename std::tuple_element<__i, tags_type>::type;

private:
	_Tp _M_data;

public:
	tvalue() = default;

	tvalue(const value_type& __x)
		: _M_data(__x)
	{
	}

	value_type&
	data()
	{
		return _M_data;
	}

	const value_type&
	data() const
	{
		return _M_data;
	}

	size_t
	size() const
	{
		return tags_size;
	}

	template<size_t __i>
	tag_type<__i>
	tag() const
	{
		return tag_type<__i>();
	}
};

template<typename... _Tags>
auto
make_tvalue(auto& __x)
	-> tvalue<decltype(__x), _Tags...>
{
	return tvalue<decltype(__x), _Tags...>(__x);
}

template<typename... _Tags>
auto
make_tvalue(const auto& __x)
	-> tvalue<decltype(__x), _Tags...>
{
	return tvalue<decltype(__x), _Tags...>(__x);
}

template<typename _Tp, typename... _Args>
class tpop_wrap
{
	tvalue<_Tp, _Args...> _M_obj;

public:
  typedef typename decltype(_M_obj)::value_type value_type;

	tpop_wrap(const tvalue<_Tp, _Args...>& __arg)
		: _M_obj(__arg)
	{
	}

	auto&
	data()
	{
		return this->_M_obj.data();
	}

	const auto&
	data() const
	{
		return this->_M_obj.data();
	}

	auto
	operator! ()
	{
		return this->data().template operator!<_Args...>();
	}

	template<typename... _A>
	auto
	operator += (const tpop_wrap<_Tp, _A...>& __x)
	{
		return this->data().template operator+=<_Args...>
			(__x.data());
	}

	auto
	operator += (const value_type& __x)
	{
		return this->data().template operator+=<_Args...>(__x);
	}
};

template<typename... _Args>
tpop_wrap<_Args...>
make_tpop_wrap(const tvalue<_Args...>& __arg)
{
	return tpop_wrap<_Args...>(__arg);
}

}

#endif /* _POLLIB_TAG */
