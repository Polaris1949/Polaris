// Generic functionality -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     functional
 *  @brief    Generic functionality
 *  @author   Polaris Zhao
 *  @version  3.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_FUNCTIONAL
#define _POLLIB_FUNCTIONAL 1

#pragma GCC system_header

#include <polaris/version>
#include <algorithm>
#include <functional>

namespace polaris
{

template<typename _Tp = void, typename _Up = void>
struct plus_with;

template<typename _Tp = void, typename _Up = void>
struct minus_with;

template<typename _Tp = void, typename _Up = void>
struct multiplies_with;

template<typename _Tp = void, typename _Up = void>
struct divides_with;

template<typename _Tp = void, typename _Up = void>
struct modulus_with;

template<typename _Tp = void>
struct plus_eq;

template<typename _Tp = void>
struct minus_eq;

template<typename _Tp = void>
struct multiplies_eq;

template<typename _Tp = void>
struct divides_eq;

template<typename _Tp = void>
struct modulus_eq;

template<typename _Tp, typename _Up>
struct plus_with
{
    auto operator() (const _Tp& __x, const _Up& __y) const
    { return __x + __y; }
};

template<>
struct plus_with<void, void>
{
    auto operator() (const auto& __x, const auto& __y) const
    { return __x + __y; }
};

template<typename _Tp, typename _Up>
struct minus_with
{
    auto operator() (const _Tp& __x, const _Up& __y) const
    { return __x - __y; }
};

template<>
struct minus_with<void, void>
{
    auto operator() (const auto& __x, const auto& __y) const
    { return __x - __y; }
};

template<typename _Tp, typename _Up>
struct multiplies_with
{
    auto operator() (const _Tp& __x, const _Up& __y) const
    { return __x * __y; }
};

template<>
struct multiplies_with<void, void>
{
    auto operator() (const auto& __x, const auto& __y) const
    { return __x * __y; }
};

template<typename _Tp, typename _Up>
struct divides_with
{
    auto operator() (const _Tp& __x, const _Up& __y) const
    { return __x / __y; }
};

template<>
struct divides_with<void, void>
{
    auto operator() (const auto& __x, const auto& __y) const
    { return __x / __y; }
};

template<typename _Tp, typename _Up>
struct modulus_with
{
    auto operator() (const _Tp& __x, const _Up& __y) const
    { return __x % __y; }
};

template<>
struct modulus_with<void, void>
{
    auto operator() (const auto& __x, const auto& __y) const
    { return __x % __y; }
};

template<typename _Tp>
struct plus_eq
{
    _Tp& operator() (_Tp& __x, const _Tp& __y) const
    { return __x += __y; }
};

template<>
struct plus_eq<void>
{
    auto& operator() (auto& __x, const auto& __y) const
    { return __x += __y; }
};

template<typename _Tp>
struct minus_eq
{
    _Tp& operator() (_Tp& __x, const _Tp& __y) const
    { return __x -= __y; }
};

template<>
struct minus_eq<void>
{
    auto& operator() (auto& __x, const auto& __y) const
    { return __x -= __y; }
};

template<typename _Tp>
struct multiplies_eq
{
    _Tp& operator() (_Tp& __x, const _Tp& __y) const
    { return __x *= __y; }
};

template<>
struct multiplies_eq<void>
{
    auto& operator() (auto& __x, const auto& __y) const
    { return __x *= __y; }
};

template<typename _Tp>
struct divides_eq
{
    _Tp& operator() (_Tp& __x, const _Tp& __y) const
    { return __x /= __y; }
};

template<>
struct divides_eq<void>
{
    auto& operator() (auto& __x, const auto& __y) const
    { return __x /= __y; }
};

template<typename _Tp>
struct modulus_eq
{
    _Tp& operator() (_Tp& __x, const _Tp& __y) const
    { return __x %= __y; }
};

template<>
struct modulus_eq<void>
{
    auto& operator() (auto& __x, const auto& __y) const
    { return __x %= __y; }
};

template<typename _Tp = void>
struct min_f;

template<typename _Tp = void>
struct max_f;

template<typename _Tp>
struct min_f
{
    const _Tp& operator() (const _Tp& __x, const _Tp& __y) const
    { return std::min(__x, __y); }
};

template<>
struct min_f<void>
{
    const auto& operator() (const auto& __x, const auto& __y) const
    { return std::min(__x, __y); }
};

template<typename _Tp>
struct max_f
{
    const _Tp& operator() (const _Tp& __x, const _Tp& __y) const
    { return std::max(__x, __y); }
};

template<>
struct max_f<void>
{
    const auto& operator() (const auto& __x, const auto& __y) const
    { return std::max(__x, __y); }
};

}

#endif /* _POLLIB_FUNCTIONAL */
