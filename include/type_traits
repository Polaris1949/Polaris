// Type traits and metaprogramming utilities -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     type_traits
 *  @brief    Type traits and metaprogramming utilities
 *  @author   Polaris Zhao
 *  @version  3.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_TYPE_TRAITS
#define _POLLIB_TYPE_TRAITS 1

#pragma GCC system_header

#include <polaris/version>
#include <type_traits>

#if __cpp_alias_templates < 200704L
#error compiler template aliases feature required
#endif

#if __cpp_lib_logical_traits < 201510L
#error library logical traits feature required
#endif

namespace polaris
{

// is_functor
template<typename _Tp>
struct is_functor
	: public std::bool_constant<std::conjunction_v<std::is_invocable<_Tp>,
		std::negation<std::is_function<_Tp>>>>
{
};

// __do_is_eq_comp_with_impl
struct __do_is_eq_comp_with_impl
{
	template<typename _Tp, typename _Up, typename = decltype(
		std::declval<_Tp&>() == std::declval<_Up&>())>
	static std::true_type __test(int);

	template<typename, typename>
	static std::false_type __test(...);
};

// __is_eq_comp_with_impl
template<typename _Tp, typename _Up>
struct __is_eq_comp_with_impl
	: public __do_is_eq_comp_with_impl
{
	using type = decltype(__test<_Tp, _Up>(0));
};

// is_equality_comparable_with
template<typename _Tp, typename _Up>
struct is_equality_comparable_with
	: public __is_eq_comp_with_impl<_Tp, _Up>::type
{
};

template<typename _Tp, typename _Up>
inline constexpr bool is_equality_comparable_with_v =
	is_equality_comparable_with<_Tp, _Up>::value;

// __is_eq_comp_impl
template<typename _Tp>
struct __is_eq_comp_impl
	: public __do_is_eq_comp_with_impl
{
	using type = decltype(__test<_Tp, _Tp>(0));
};

// is_equality_comparable
template<typename _Tp>
struct is_equality_comparable
	: public __is_eq_comp_impl<_Tp>::type
{
};

// __do_is_lt_comp_with_impl
struct __do_is_lt_comp_with_impl
{
	template<typename _Tp, typename _Up, typename = decltype(
		std::declval<_Tp&>() < std::declval<_Up&>())>
	static std::true_type __test(int);

	template<typename, typename>
	static std::false_type __test(...);
};

// __is_lt_comp_with_impl
template<typename _Tp, typename _Up>
struct __is_lt_comp_with_impl
	: public __do_is_lt_comp_with_impl
{
	using type = decltype(__test<_Tp, _Up>(0));
};

// is_less_than_comparable_with
template<typename _Tp, typename _Up>
struct is_less_than_comparable_with
	: public __is_lt_comp_with_impl<_Tp, _Up>::type
{
};

// __is_lt_comp_impl
template<typename _Tp>
struct __is_lt_comp_impl
	: public __do_is_lt_comp_with_impl
{
	using type = decltype(__test<_Tp, _Tp>(0));
};

// is_less_than_comparable
template<typename _Tp>
struct is_less_than_comparable
	: public __is_lt_comp_impl<_Tp>::type
{
};

#define POL_MAKE_HO_CALL(NAME) \
	template<typename _Tp> \
	struct ho_##NAME \
		: public decltype(__ho_##NAME##_impl::__test<_Tp>(0)) \
	{ \
	};

#define POL_MAKE_HO_IMPL1(OP, NAME) \
	struct __ho_##NAME##_impl \
	{ \
		template<typename _Tp, typename = \
			decltype(OP std::declval<_Tp>())> \
		static std::true_type __test(int); \
		\
		template<typename> \
		static std::false_type __test(...); \
	};

#define POL_MAKE_HO1(OP, NAME) \
	POL_MAKE_HO_IMPL1(OP, NAME) \
	POL_MAKE_HO_CALL(NAME)

POL_MAKE_HO1(!, logical_not)
POL_MAKE_HO1(~, bitwise_not)
POL_MAKE_HO1(+, posate)
POL_MAKE_HO1(-, negate)
POL_MAKE_HO1(&, addressof)
POL_MAKE_HO1(*, dereference)

#undef POL_MAKE_HO1
#undef POL_MAKE_HO_IMPL1

#define POL_MAKE_HO_IMPL2(OP, NAME) \
	struct __ho_##NAME##_impl \
	{ \
		template<typename _Tp, typename = \
			decltype(std::declval<_Tp>() OP std::declval<_Tp>())> \
		static std::true_type __test(int); \
		\
		template<typename> \
		static std::false_type __test(...); \
	};

#define POL_MAKE_HO2(OP, NAME) \
	POL_MAKE_HO_IMPL2(OP, NAME) \
	POL_MAKE_HO_CALL(NAME)

POL_MAKE_HO2(+, plus)
POL_MAKE_HO2(-, minus)
POL_MAKE_HO2(*, multiplies)
POL_MAKE_HO2(/, divides)
POL_MAKE_HO2(%, modulus)
POL_MAKE_HO2(<<, left_shift)
POL_MAKE_HO2(>>, right_shift)
POL_MAKE_HO2(=, assign)

POL_MAKE_HO2(&, bitwise_and)
POL_MAKE_HO2(|, bitwise_or)
POL_MAKE_HO2(^, bitwise_xor)
POL_MAKE_HO2(&&, logical_and)
POL_MAKE_HO2(||, logical_or)

POL_MAKE_HO2(==, equal_to)
POL_MAKE_HO2(!=, not_equal_to)
POL_MAKE_HO2(<, less)
POL_MAKE_HO2(>, greater)
POL_MAKE_HO2(<=, less_equal)
POL_MAKE_HO2(>=, greater_equal)

#undef POL_MAKE_HO2
#undef POL_MAKE_HO_IMPL2
#undef POL_MAKE_HO_CALL

}

#endif /* _POLLIB_TYPE_TRAITS */
