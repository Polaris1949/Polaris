// Type traits and metaprogramming utilities -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     type_traits
 *  @brief    Type traits and metaprogramming utilities
 *  @author   Polaris Zhao
 *  @version  3.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_TYPE_TRAITS
#define _POLLIB_TYPE_TRAITS 1

#pragma GCC system_header

#include <polaris/version>
#include <type_traits>
#include <polaris/functional>

#if __cpp_alias_templates < 200704L
#error compiler template aliases feature required
#endif

#if __cpp_variable_templates < 201304L
#error compiler variable templates feature required
#endif

#if __cpp_lib_logical_traits < 201510L
#error library logical traits feature required
#endif

#if __cpp_inline_variables < 201606L
#error compiler inline variables feature required
#endif

namespace polaris
{

// rebind
template<typename>
struct rebind;

template<template<typename> typename _Tp, typename... _Up>
struct rebind<_Tp<_Up...>>
{
    template<typename... _Args>
    using type = _Tp<_Args...>;
};

// rebind_t
template<typename _Tp, typename... _Args>
using rebind_t = typename rebind<_Tp>::template type<_Args...>;

// true_v
template<typename...>
inline constexpr bool true_v = true;

// false_v
template<typename...>
inline constexpr bool false_v = false;

// is_functor
template<typename _Tp>
struct is_functor
    : public std::bool_constant<std::conjunction_v<std::is_invocable<_Tp>,
        std::negation<std::is_function<_Tp>>>>
{};

// is_functor_v
template<typename _Tp>
inline constexpr bool is_functor_v = is_functor<_Tp>::value;

struct is_operable_impl
{
    template<typename _Op, typename... _Args, typename _Req =
        decltype(std::declval<_Op>()(std::declval<_Args>()...))>
    static std::true_type _S_test(int);

    template<typename, typename...>
    static std::false_type _S_test(...);
};

template<typename _Op, typename... _Args>
struct is_operable_base : public is_operable_impl
{
    using type = decltype(_S_test<_Op, _Args...>(0));
};

template<typename _Op, typename... _Args>
struct is_operable : public is_operable_base<_Op, _Args...>::type
{};

template<typename _Op, typename... _Args>
inline constexpr bool is_operable_v = is_operable<_Op, _Args...>::value;

template<typename _Tp>
struct is_plusable : public is_operable<std::plus<_Tp>, _Tp, _Tp>
{};

template<typename _Tp>
inline constexpr bool is_plusable_v = is_plusable<_Tp>::value;

template<typename _Tp, typename _Up>
struct is_plusable_with : public is_operable<plus_with<_Tp, _Up>, _Tp, _Up>
{};

template<typename _Tp, typename _Up>
inline constexpr bool is_plusable_with_v = is_plusable_with<_Tp, _Up>::value;

template<typename _Tp>
struct is_plus_assignable : public is_operable<plus_eq<_Tp>, _Tp&, _Tp>
{};

template<typename _Tp>
inline constexpr bool is_plus_assignable_v = is_plus_assignable<_Tp>::value;

template<typename _Tp>
struct is_equality_comparable
    : public is_operable<std::equal_to<_Tp>, _Tp, _Tp>
{};

template<typename _Tp>
inline constexpr bool is_equality_comparable_v =
    is_equality_comparable<_Tp>::value;

template<typename _Tp>
struct is_less_than_comparable
    : public is_operable<std::less<_Tp>, _Tp, _Tp>
{};

template<typename _Tp>
inline constexpr bool is_less_than_comparable_v =
    is_less_than_comparable<_Tp>::value;

#ifdef POL_DEPRECATED
#define POL_MAKE_HO_CALL(NAME) \
    template<typename _Tp> \
    struct ho_##NAME \
        : public decltype(__ho_##NAME##_impl::_S_test<_Tp>(0)) \
    { \
    }; \
    \
    template<typename _Tp> \
    inline constexpr bool ho_##NAME##_v = ho_##NAME<_Tp>::value;

#define POL_MAKE_HO_IMPL1(OP, NAME) \
    struct __ho_##NAME##_impl \
    { \
        template<typename _Tp, typename = \
            decltype(OP std::declval<_Tp>())> \
        static std::true_type _S_test(int); \
        \
        template<typename> \
        static std::false_type _S_test(...); \
    };

#define POL_MAKE_HO1(OP, NAME) \
    POL_MAKE_HO_IMPL1(OP, NAME) \
    POL_MAKE_HO_CALL(NAME)

POL_MAKE_HO1(!, logical_not)
POL_MAKE_HO1(~, bitwise_not)
POL_MAKE_HO1(+, posate)
POL_MAKE_HO1(-, negate)
POL_MAKE_HO1(&, addressof)
POL_MAKE_HO1(*, dereference)

#undef POL_MAKE_HO1
#undef POL_MAKE_HO_IMPL1

#define POL_MAKE_HO_IMPL2(OP, NAME) \
    struct __ho_##NAME##_impl \
    { \
        template<typename _Tp, typename = \
            decltype(std::declval<_Tp>() OP std::declval<_Tp>())> \
        static std::true_type _S_test(int); \
        \
        template<typename> \
        static std::false_type _S_test(...); \
    };

#define POL_MAKE_HO2(OP, NAME) \
    POL_MAKE_HO_IMPL2(OP, NAME) \
    POL_MAKE_HO_CALL(NAME)

POL_MAKE_HO2(+, plus)
POL_MAKE_HO2(-, minus)
POL_MAKE_HO2(*, multiplies)
POL_MAKE_HO2(/, divides)
POL_MAKE_HO2(%, modulus)
POL_MAKE_HO2(<<, left_shift)
POL_MAKE_HO2(>>, right_shift)
POL_MAKE_HO2(=, assign)

POL_MAKE_HO2(&, bitwise_and)
POL_MAKE_HO2(|, bitwise_or)
POL_MAKE_HO2(^, bitwise_xor)
POL_MAKE_HO2(&&, logical_and)
POL_MAKE_HO2(||, logical_or)

POL_MAKE_HO2(==, equal_to)
POL_MAKE_HO2(!=, not_equal_to)
POL_MAKE_HO2(<, less)
POL_MAKE_HO2(>, greater)
POL_MAKE_HO2(<=, less_equal)
POL_MAKE_HO2(>=, greater_equal)

#undef POL_MAKE_HO2
#undef POL_MAKE_HO_IMPL2
#undef POL_MAKE_HO_CALL
#endif /* POL_DEPRECATED */

}

#endif /* _POLLIB_TYPE_TRAITS */
