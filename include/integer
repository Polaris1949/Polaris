// Infinite precision integer library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file integer
 *  This is a Polaris C++ Library header.
 */

// Written by Jingyu Zhao.

#ifndef _POLLIB_INTEGER
#define _POLLIB_INTEGER 1

#pragma GCC system_header

#if !_POL_NEWLIB
#define _Int_stdbase _Int_base
#endif

#include <polaris/version> // Version support
#include <polaris/boolean> // Boolean support
#include <polaris/exception> // Exception support
#include <polaris/utility> // Utility support
#include <polaris/bits/intfwd.h> // Forward header
#include <polaris/bits/intexcept.h> // Integer exception
#include <polaris/bits/intalloc.h> // Integer allocation
#include <polaris/bits/intref.h> // Integer reference
#if _POL_NEWLIB
#include <polaris/bits/intbase.h>
#include <polaris/bits/intgenbase.h>
#endif
#if !_POL_DEPRECATED
#include <polaris/bits/intstdbase.h> // Integer standard base type
#endif
//#include <polaris/bits/integer.h> // Integer class
#include <polaris/bits/intfwd.tcc> // Forward header
#include <polaris/bits/intexcept.tcc> // Integer exception
#include <polaris/bits/intalloc.tcc> // Integer allocation
#include <polaris/bits/intref.tcc> // Integer reference
#if _POL_NEWLIB
#include <polaris/bits/intbase.tcc>
#include <polaris/bits/intgenbase.tcc>
#endif
#if !_POL_DEPRECATED
#include <polaris/bits/intstdbase.tcc> // Integer standard base type
#endif
//#include <polaris/bits/integer.tcc> // Integer class

#if !_POL_NEWLIB && !_POL_DEBUG
// Also: #if !(_POL_NEWLIB || _POL_DEBUG)
#undef _Int_stdbase
#endif

#endif /* _POLLIB_INTEGER */
