// Utility library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file utility
 *  This is a Polaris C++ Library header.
 */

// Written by Jingyu Zhao.

#ifndef _POLLIB_UTILTIY
#define _POLLIB_UTILTIY 1

#pragma GCC system_header

#include <polaris/version>
#include <polaris/exception>
#include <polaris/bits/utility.h>
#include <polaris/bits/utility.tcc>

namespace polaris
{

template<typename _Tp, typename =
	decltype(std::declval<_Tp>() == std::declval<_Tp>())>
bool fully_equal_to(_Tp&& __x, _Tp&& __y)
{
	return __x == __y;
}

template<typename _Tp, typename _Up>
bool fully_equal_to(_Tp&& __x, _Up&& __y)
{
	return false;
}

template<typename _Tp>
_Tp qpow(_Tp __x, _Tp __y, _Tp __mod)
{
	_Tp __res{1};
	_Tp __tmp{__x % __mod};

	while (__y)
	{
		if (__y & 1) __res = __res * __tmp % __mod;
		__tmp = __tmp * __tmp % __mod;
		__y >>= 1;
	}

	return __res;
}

}

#endif /* _POLLIB_UTILITY */
