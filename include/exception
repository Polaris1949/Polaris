// Exception handling library -*- C++ -*-

// Copyright (C) 1997-2017 Free Software Foundation, Inc.
//
// This file is part of the Polaris C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file     exception
 *  @brief    Exception library
 *  @author   Polaris Zhao
 *  @version  3.0
 *
 *  This is a Polaris C++ Library header.
**/

#ifndef _POLLIB_EXCEPTION
#define _POLLIB_EXCEPTION 1

#include <polaris/version>
#include <polaris/type>
#include <polaris/typeinfo>
#include <stdexcept>
#include <string>

namespace pol
{

class exception
{
public:
    exception() = delete;

    template<typename _Ex>
    exception(_Ex __e);

    std::exception_ptr
    eptr() const noexcept;

    const char*
    name() const noexcept;

    const char*
    what() const noexcept;

private:
    std::exception_ptr _M_eptr;
    std::string _M_name;
};

template<typename _Ex>
exception::
exception(_Ex __e)
    : _M_eptr{std::make_exception_ptr(__e)}, _M_name{move(check_type<_Ex>())}
{ static_assert(std::is_base_of_v<std::exception, _Ex>, "bad exception"); }

class std_exception
    : public std::exception
{
public:
    std_exception(pol::exception&& __ex);
    virtual ~std_exception() noexcept = default;

    virtual const char* what() const noexcept override;

private:
    std::string _M_what;
};

void throw_ex(exception&& __e);

}

#endif /* _POLLIB_EXCEPTION */
